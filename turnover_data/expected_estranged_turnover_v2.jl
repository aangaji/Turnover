[
Dict( :N => 200, :Ncutoff => 200, :b => 1.0, :μ => 0.4, :reps => 2000,
      :turnover => [0.0789, 0.10276, 0.1315, 0.15903, 0.19354, 0.23291, 0.28007, 0.3368, 0.40408, 0.49247, 0.60857, 0.76973, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
      :std => [0.04657, 0.04452, 0.04682, 0.04829, 0.04974, 0.05236, 0.05616, 0.05741, 0.05742, 0.05816, 0.05632, 0.04303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
      :d => [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95] ), 
    
Dict( :N => 200, :Ncutoff => 200, :b => 1.0, :μ => 0.3, :reps => 2000,
      :turnover => [0.04578, 0.06262, 0.07993, 0.10086, 0.12251, 0.14839, 0.17925, 0.21469, 0.25332, 0.30292, 0.36464, 0.45032, 0.56637, 0.73265, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
      :std => [0.04803, 0.04589, 0.04481, 0.04654, 0.0477, 0.04988, 0.05429, 0.05803, 0.06146, 0.06035, 0.0662, 0.06691, 0.06458, 0.05483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
      :d => [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95] ), 

Dict( :N => 200, :Ncutoff => 200, :b => 1.0, :μ => 0.2, :reps => 2000,
      :turnover => [0.02224, 0.03561, 0.04899, 0.06147, 0.07705, 0.09264, 0.10986, 0.13014, 0.15325, 0.18236, 0.2108, 0.25714, 0.30984, 0.38304, 0.49376, 0.66964, 1.0, 1.0, 1.0, 1.0],
      :std => [0.05241, 0.05221, 0.05333, 0.05083, 0.05463, 0.05504, 0.06042, 0.06137, 0.06507, 0.06911, 0.07084, 0.07594, 0.07729, 0.08017, 0.08254, 0.07377, 0.0, 0.0, 0.0, 0.0],
      :d => [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95] ), 

Dict( :N => 200, :Ncutoff => 200, :b => 1.0, :μ => 0.1, :reps => 2000,
      :turnover => [0.00803, 0.01839, 0.02692, 0.03557, 0.04398, 0.0574, 0.06962, 0.07788, 0.08925, 0.10152, 0.11857, 0.13934, 0.16316, 0.19245, 0.22834, 0.28388, 0.36987, 0.54369, 1.0, 1.0],
      :std => [0.0635, 0.05919, 0.06676, 0.06726, 0.06421, 0.07878, 0.08119, 0.08576, 0.08839, 0.09768, 0.09872, 0.10153, 0.10596, 0.11028, 0.11157, 0.11794, 0.115, 0.1109, 0.0, 0.0],
      :d => [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95] ),

Dict( :N => 200, :Ncutoff => 200, :b => 1.0, :μ => 0.05, :reps => 2000,
      :turnover => [0.00292, 0.00858, 0.01757, 0.02572, 0.0344, 0.04152, 0.04936, 0.06131, 0.06285, 0.07921, 0.08919, 0.0986, 0.1164, 0.12954, 0.14568, 0.1772, 0.21791, 0.27409, 0.42043, 1.0],
      :std => [0.04251, 0.02482, 0.05196, 0.07655, 0.07751, 0.08918, 0.09519, 0.11863, 0.11827, 0.12918, 0.14013, 0.14362, 0.16097, 0.16654, 0.16455, 0.17072, 0.17251, 0.16735, 0.16629, 0.0],
      :d => [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95] ),    
]

# q = (d + b*(μ/2)^2) / (b* (1 - (μ/2) )^2)

# simDict = expect

# simDF = DataFrame(N=Int[], Ncutoff=Int[], b=Float64[], μ=Float64[], reps=Int[], d=Float64[], turnover=Float64[], std=Float64[])
# for res in simDict
#     for i=1:length(res[:d])
#         push!(simDF, ( res[:N], res[:Ncutoff], res[:b], res[:μ], res[:reps], res[:d][i], res[:turnover][i], res[:std][i] ) )
#     end
# end
# # CSV.write("expected_estranged_turnover_v2.csv")
# first(simDF,6)